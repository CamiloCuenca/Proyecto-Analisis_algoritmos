# C√≥digo para reemplazar en tu notebook Jupyter
# Copia y pega este c√≥digo en una nueva celda

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import re


def esperar_descarga(download_path, timeout=30):
    """Espera a que aparezca un archivo .bib en la carpeta de descargas"""
    for _ in range(timeout):
        archivos = [f for f in os.listdir(download_path) if f.endswith(".bib")]
        if archivos:
            return os.path.join(download_path, archivos[0])
        time.sleep(1)
    return None


def obtener_total_paginas(driver):
    """
    Detecta autom√°ticamente el n√∫mero total de p√°ginas disponibles
    """
    try:
        # Buscar el texto que indica el total de resultados
        # Ejemplo: "1-100 of 1,234 results"
        results_info = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".results-info"))
        )
        
        texto_resultados = results_info.text
        print(f"üìä Informaci√≥n de resultados: {texto_resultados}")
        
        # Extraer el n√∫mero total de resultados usando regex
        # Buscar patrones como "of 1,234 results" o "of 1234 results"
        match = re.search(r'of\s+([\d,]+)\s+results', texto_resultados)
        if match:
            total_resultados = int(match.group(1).replace(',', ''))
            print(f"üìà Total de resultados encontrados: {total_resultados}")
            
            # Calcular n√∫mero de p√°ginas (asumiendo 100 resultados por p√°gina)
            resultados_por_pagina = 100
            total_paginas = (total_resultados + resultados_por_pagina - 1) // resultados_por_pagina
            
            print(f"üìÑ Total de p√°ginas calculadas: {total_paginas}")
            return total_paginas
        
        # M√©todo alternativo: buscar directamente en la paginaci√≥n
        try:
            pagination_links = driver.find_elements(By.CSS_SELECTOR, ".pagination a")
            if pagination_links:
                # Buscar el n√∫mero m√°s alto en los enlaces de paginaci√≥n
                numeros_pagina = []
                for link in pagination_links:
                    texto = link.text.strip()
                    if texto.isdigit():
                        numeros_pagina.append(int(texto))
                
                if numeros_pagina:
                    max_pagina = max(numeros_pagina)
                    print(f"üìÑ P√°ginas detectadas por paginaci√≥n: {max_pagina}")
                    return max_pagina
        except:
            pass
            
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo detectar el total de p√°ginas autom√°ticamente: {e}")
    
    # Si no se puede detectar, usar un valor por defecto alto
    print("üîÑ Usando detecci√≥n din√°mica p√°gina por p√°gina...")
    return None


def verificar_pagina_siguiente_existe(driver):
    """
    Verifica si existe un bot√≥n de 'siguiente p√°gina'
    """
    try:
        boton_siguiente = driver.find_element(By.XPATH, "//a[@data-aa-name='srp-next-page']")
        # Verificar si el bot√≥n est√° habilitado (no deshabilitado)
        clases = boton_siguiente.get_attribute("class") or ""
        aria_disabled = boton_siguiente.get_attribute("aria-disabled")
        
        # Si tiene clase 'disabled' o aria-disabled='true', no hay m√°s p√°ginas
        if "disabled" in clases.lower() or aria_disabled == "true":
            return False
        return True
    except:
        return False


# ============================================================================
# C√ìDIGO PRINCIPAL SIN LIMITADOR DE P√ÅGINAS
# ============================================================================

# Detectar autom√°ticamente el total de p√°ginas
print("üîç Detectando n√∫mero total de p√°ginas...")
total_pages = obtener_total_paginas(driver)

# Si no se pudo detectar, usar detecci√≥n din√°mica
if total_pages is None:
    print("üìã Modo din√°mico activado: se procesar√°n todas las p√°ginas disponibles")
    usar_deteccion_dinamica = True
    max_pages = float('inf')  # Sin l√≠mite
else:
    print(f"üìä Se procesar√°n {total_pages} p√°ginas en total")
    usar_deteccion_dinamica = False
    max_pages = total_pages

page_numScience = 1
paginas_procesadas = 0

while True:
    print(f"\n{'='*50}")
    if usar_deteccion_dinamica:
        print(f"Procesando p√°gina {page_numScience}...")
    else:
        print(f"Procesando p√°gina {page_numScience} de {max_pages}...")

    try:
        # Seleccionar checkbox real (input, no span)
        checkbox_input = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "#srp-toolbar input[type='checkbox']"))
        )

        # Marcarlo si no est√° marcado
        if not checkbox_input.is_selected():
            driver.execute_script("arguments[0].click();", checkbox_input)
            time.sleep(1)

        # Confirmar que qued√≥ marcado
        if checkbox_input.is_selected():
            print("‚úÖ Checkbox de 'todos los art√≠culos' marcado correctamente")
        else:
            print("‚ö†Ô∏è No se pudo marcar el checkbox, reintentando...")
            driver.execute_script("arguments[0].click();", checkbox_input)
            time.sleep(1)

        # Bot√≥n de exportar
        export_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "span.export-all-link-text"))
        )
        driver.execute_script("arguments[0].click();", export_button)
        time.sleep(1)

        # Bot√≥n BibTeX
        bibtex_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[data-aa-button='srp-export-multi-bibtex']"))
        )

        intentos_descarga = 0
        descarga_exitosa = False
        
        while intentos_descarga < 3 and not descarga_exitosa:
            try:
                bibtex_button.click()
                print(f"Intento de descarga #{intentos_descarga+1} para p√°gina {page_numScience}")
                
                nuevo_archivo = esperar_descarga(download_path, 20)
                
                if nuevo_archivo:
                    print(f"‚úÖ Archivo descargado: {os.path.basename(nuevo_archivo)}")
                    descarga_exitosa = True
                else:
                    print("No se pudo detectar el archivo descargado")
                    
            except Exception as e:
                print(f"Error en el intento {intentos_descarga + 1}: {e}")
            
            intentos_descarga += 1
            if not descarga_exitosa and intentos_descarga < 3:
                time.sleep(2)

        if not descarga_exitosa:
            print(f"‚ùå No se pudo completar la descarga para la p√°gina {page_numScience}")

        # Cerrar men√∫ exportar
        try:
            close_button = driver.find_element(By.CSS_SELECTOR, "button.export-close-button")
            close_button.click()
            time.sleep(1)
        except:
            pass

        paginas_procesadas += 1

        # Verificar si hay m√°s p√°ginas disponibles
        if usar_deteccion_dinamica:
            if not verificar_pagina_siguiente_existe(driver):
                print(f"üèÅ No hay m√°s p√°ginas disponibles. Proceso completado.")
                break
        else:
            if page_numScience >= max_pages:
                print(f"üèÅ Se han procesado todas las {max_pages} p√°ginas.")
                break

        # Pasar a la siguiente p√°gina
        try:
            time.sleep(2)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            botonSiguientePag = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, "//a[@data-aa-name='srp-next-page']"))
            )
            driver.execute_script("arguments[0].click();", botonSiguientePag)
            print(f"üîÑ Avanzando a la p√°gina {page_numScience + 1}...")
            time.sleep(5)
            page_numScience += 1
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo avanzar de p√°gina: {e}")
            print("üèÅ Posiblemente se han procesado todas las p√°ginas disponibles.")
            break

    except Exception as e:
        print(f"‚ö†Ô∏è Error en la p√°gina {page_numScience}: {e}")
        # Intentar continuar con la siguiente p√°gina
        page_numScience += 1
        continue

print(f"\nüéâ ¬°Proceso completado! Se procesaron {paginas_procesadas} p√°ginas en total.")
